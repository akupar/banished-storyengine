{"version":3,"sources":["../src/util.ts","../src/constants.ts","../src/quarks.ts","../src/countbits.ts","../src/storyPoint.ts","../src/transition.ts","../data/story.json","../src/story.ts","../src/storyEngine.ts","../src/index.ts"],"sourcesContent":["export function toBinaryString(number: BigInt, width: number) {\n    return number.toString(2).padStart(width, '0');\n};\n\nexport function getColor(id: number) {\n    const hex = id.toString(16).padStart(6, '0');\n    return hex.substring(hex.length - 6, hex.length);\n};\n\n// https://stackoverflow.com/a/52171480\nexport function cyrb53(str: string, seed: number = 0) {\n    let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n    for(let i = 0, ch; i < str.length; i++) {\n        ch = str.charCodeAt(i);\n        h1 = Math.imul(h1 ^ ch, 2654435761);\n        h2 = Math.imul(h2 ^ ch, 1597334677);\n    }\n    h1  = Math.imul(h1 ^ (h1 >>> 16), 2246822507);\n    h1 ^= Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n    h2  = Math.imul(h2 ^ (h2 >>> 16), 2246822507);\n    h2 ^= Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n\n    return 4294967296 * (2097151 & h2) + (h1 >>> 0);\n};\n\n\n/**\n * Separates positive, negative, and ignored conditions from array of conditions removing the prefix, for example:\n * ['talkingToBert', '-knowsAboutHunter', '?metBert']\n * -> { positive: ['talkingToBert'], negative: ['knowsAboutHunter'], ignored: ['metBert] }\n **/\nexport function destructureTidbitArray(condition: string[]) {\n    const positive = [];\n    const negative = [];\n    // Tidbits prefixed with asterisk are not added to the given condition of a story point.\n    const ignored = [];\n\n    for ( const tidbit of condition ) {\n        if ( tidbit.startsWith('-') ) {\n            negative.push(tidbit.substring(1));\n        } else if ( tidbit.startsWith('?') ) {\n            ignored.push(tidbit.substring(1));\n        } else {\n            positive.push(tidbit);\n        }\n    }\n\n    return {\n        positive,\n        negative,\n        ignored\n    };\n};\n","export const STATELEN = 20;\n","import { toBinaryString } from './util';\nimport { STATELEN } from './constants';\n\n\n/**\n * Represents Quark before it is interned to library.\n **/\nexport class NonInternedQuark {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n};\n\n/**\n * This is just a convinience function so we don't need to use new with NonInternedQuark.\n **/\nexport function quark(name: string) {\n    return new NonInternedQuark(name);\n};\n\nexport class Quark {\n    name: string;\n    _bitnum: number;\n    _mask: bigint;\n\n    constructor(quark: NonInternedQuark, bitnum: number) {\n        this.name = quark.name;\n        this._bitnum = bitnum;\n        this._mask = 1n << BigInt(bitnum);\n    }\n\n    get bitnum() {\n        return this._bitnum;\n    }\n\n    test(state: bigint) {\n        return !!(state & this._mask);\n    }\n};\n\nexport class Library {\n    quarksByNumber: Quark[];\n    quarksByName: Map<string, Quark>;\n\n    constructor(items: NonInternedQuark[]) {\n        this.quarksByNumber = new Array(items.length);\n        this.quarksByName = new Map();\n\n        for ( const [i, item] of items.entries() ) {\n            if ( this.quarksByName.has(item.name) ) {\n                throw new Error(`Multiple quarks of the same name: ${item.name}`);\n            }\n            const quark = new Quark(item, i);\n            this.quarksByNumber[i] = quark\n            this.quarksByName.set(item.name, quark);\n        }\n    }\n\n    get length() {\n        return this.quarksByNumber.length;\n    }\n\n    nameState(state: bigint) {\n        return this.quarksByNumber\n                   .filter(quark => quark.test(state))\n                   .map(quark => quark.name);\n    }\n\n    nameMolecule(molecule: Molecule) {\n        const str = molecule.toString();\n        const out = new Array(str.length);\n        for ( let i = str.length - 1; i > -1; i-- ) {\n            const number = str.length - 1 - i;\n            const quark = this.quarksByNumber[number];\n            if ( !quark ) {\n                continue;\n            }\n            if ( str[i] === '?' ) {\n                out[i] = `?${quark.name}`;\n            } else if ( str[i] === '0' ) {\n                out[i] = `-${quark.name}`;\n            } else  {\n                out[i] = `${quark.name}`;\n            }\n        }\n\n        return JSON.stringify(out);\n    }\n\n    getQuark(name: string) {\n        return this.quarksByName.get(name);\n    }\n\n    getAtomNumberFor(state: string[]) {\n        let number = 0n;\n        for ( let name of state ) {\n            if ( name.startsWith('?') ) {\n                name = name.substring(1);\n            }\n            const quark = this.quarksByName.get(name);\n            if ( quark === undefined ) {\n                throw new Error(`No such quark: ${name}`);\n            }\n            number |= quark._mask;\n        }\n\n        return number;\n    }\n\n    getMoleculeFor(positiveSet: string[], negativeSet: string[]) {\n        const positiveNumber = this.getAtomNumberFor(positiveSet.map(q => q.startsWith('?') ? q.substring(1) : q));\n        const negativeNumber = this.getAtomNumberFor(negativeSet.map(q => q.startsWith('?') ? q.substring(1) : q));\n\n        const positiveMandatory = this.getAtomNumberFor(removeOptional(positiveSet));\n        const negativeMandatory = this.getAtomNumberFor(removeOptional(negativeSet));\n\n        return new Molecule(positiveNumber, negativeNumber, positiveMandatory | negativeMandatory);\n    }\n};\n\nconst removeOptional = (transition: string[]) =>\n    transition.filter(tidbit => !tidbit.startsWith('?'));\n\n\n\nexport class Molecule {\n    stateSet: bigint;\n    stateNonset: bigint;\n    mask: bigint;\n\n    constructor(stateSet: bigint, stateNonset: bigint, mask?: bigint) {\n        if ( stateSet & stateNonset ) {\n            throw new Error(\"Set and unset overlap\");\n        }\n        this.stateSet = stateSet;\n        this.stateNonset = stateNonset;\n        this.mask = mask ?? (stateSet | stateNonset);\n    }\n\n    toString() {\n        const mask = this.mask.toString(2);\n        const w = Math.max(mask.length, STATELEN);\n        const s = toBinaryString(this.stateSet, w);\n        const u = toBinaryString(this.stateNonset, w);\n        const m = toBinaryString(this.mask, w);\n\n        const str = new Array(w);\n        for ( let i = 0; i < w; i++ ) {\n            if ( s[i] === '1' && m[i] === '1' ) {\n                str[i] = '1';\n            } else if ( u[i] === '0' && m[i] === '1' ) {\n                str[i] = '0';\n            } else {\n                str[i] = '?';\n            }\n        }\n        return str.join('');\n    }\n\n    equals(other: Molecule) {\n        return this.mask === other.mask && this.stateSet === other.stateSet && this.stateNonset === other.stateNonset;\n    }\n\n    test(state: bigint) {\n        //console.error(\"this:\", this.toString(), \"state\", toBinaryString(state, STATELEN));\n        if ( this.mask === 0n ) {\n            return true;\n        }\n\n        return !!((this.mask & state) === this.stateSet);\n    }\n\n    applyToState(state: bigint): bigint {\n        return state & ~this.stateNonset | this.stateSet ;\n    }\n\n    overlapsWith(other: Molecule): boolean {\n        if ( (this.stateSet & other.stateSet) !== 0n\n          || (this.stateNonset & other.stateNonset) !== 0n ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getUnion(other: Molecule): Molecule {\n        return new Molecule(this.stateSet | other.stateSet, this.stateNonset | other.stateNonset);\n    }\n\n    getIntersection(other: Molecule): Molecule {\n        return new Molecule(this.stateSet & other.stateSet, this.stateNonset & other.stateNonset);\n    }\n\n    getInverse(): Molecule {\n        return new Molecule(this.stateNonset, this.stateSet);\n    }\n\n    getOppositesRemoved(other: Molecule): Molecule {\n        return new Molecule(this.stateSet ^ (this.stateSet & other.stateNonset), this.stateNonset ^ (this.stateNonset & other.stateSet));\n    }\n\n    removeBits(bits: bigint) {\n        this.stateSet ^= bits;\n        this.stateNonset ^= bits;\n    }\n\n    withoutBits(bits: bigint) {\n        return new Molecule(this.stateSet ^ (bits & this.stateSet), this.stateNonset ^ (bits & this.stateNonset));\n    }\n};\n","\n// https://www.geeksforgeeks.org/count-set-bits-in-an-integer/\n\n\nconst bitsSetTable256: number[] = new Array(256);\n\n// Function to initialise the lookup table\n(initialize => {\n    bitsSetTable256[0] = Number(0n);\n    for ( let i = 0; i < 256; i++ ) {\n        bitsSetTable256[i] = (i & 1) + bitsSetTable256[i / 2];\n    }\n})();\n\n\n// Function to return the count\n// of set bits in n\nexport function countSetBits(n: bigint) {\n    let sum = 0;\n    while ( n > 0n ) {\n        const byte = Number(n & 0xffn);\n        sum += bitsSetTable256[byte];\n        n = n >> 8n;\n    }\n    return sum;\n};\n","import { Molecule } from './quarks';\nimport type { Transition, TransitionLib } from './transition';\nimport { countSetBits } from './countbits';\nimport { toBinaryString, cyrb53 } from './util';\nimport { ActionsRecord } from './types';\n\n\nexport class Choice {\n    name: string;\n    given: Molecule | null;\n\n    constructor(name: string, given: Molecule | null) {\n        this.name = name;\n        this.given = given;\n    }\n};\n\nexport class StoryPoint {\n    id: string;\n    entry: Molecule;\n    data: ActionsRecord | undefined;\n    choices: Map<string, Choice>;\n    choiceNames: string[];\n    maskBits: number;\n\n    constructor(id: string, entry: Molecule, data: ActionsRecord | undefined, choices: Map<string, Choice>) {\n        this.id = id;\n        this.entry = entry;\n        this.data = data;\n        this.choiceNames = Array.from(choices.keys());\n        this.choices = choices;\n\n        this.maskBits = countSetBits(this.entry.mask);\n    }\n\n    get hash() {\n        return cyrb53(this.data?.say ?? \"\");\n    }\n\n    get entryMask() {\n        return this.entry.mask;\n    }\n\n    matches(state: bigint) {\n        return this.entry.test(state);\n    }\n\n    applyChoice(state: bigint, choice: Transition) {\n        return choice.fieldsToSet.applyToState(state);\n    }\n\n    getUnion(other: StoryPoint) {\n        if ( this.data !== undefined && other.data !== undefined ) {\n            throw new Error(`Both story points contain data: ${this.id} and ${other.id}`);\n        }\n\n        const choiceNames = [];\n        const choices = new Map<string, Choice>();\n        for ( const item of this.choiceNames ) {\n            const choice = this.choices.get(item);\n            if ( !choice ) {\n                continue;\n            }\n            choiceNames.push(item);\n            choices.set(item, choice);\n        }\n\n\n        for ( const item of other.choiceNames ) {\n            if ( !choiceNames.includes(item) ) {\n                const choice = other.choices.get(item);\n                if ( !choice ) {\n                    continue;\n                }\n                choiceNames.push(item);\n                choices.set(item, choice);\n            }\n        }\n\n        return new StoryPoint(\n            `${this.id}+${other.id}`,\n            this.entry.getUnion(other.entry),\n            this.data ?? other.data,\n            choices\n        );\n    }\n\n    filterChoices(state: bigint) {\n        const choiceNames = [];\n        for ( const choiceName of this.choiceNames ) {\n            const choice = this.choices.get(choiceName);\n            if ( choice && (!choice.given || choice.given.test(state)) ) {\n                choiceNames.push(choiceName);\n            }\n        }\n\n        return choiceNames;\n    }\n\n    toString() {\n        return `StoryPoint { data: ${JSON.stringify(this.data)} }`;\n    }\n};\n\nfunction compareBigInt(a: bigint, b: bigint) {\n    if ( a > b ) {\n        return 1;\n    } else if ( a < b ){\n        return -1;\n    } else {\n        return 0;\n    }\n}\n\n\nexport class StoryPointStore {\n    storyPoints: StoryPoint[];\n\n    constructor(storyPoints: StoryPoint[]) {\n        this.storyPoints = storyPoints;\n        //console.log(this.storyPoints);\n    }\n\n    get size() {\n        return this.storyPoints.length;\n    }\n\n    getAllMatching(state: bigint): StoryPoint[] {\n        const found = [];\n\n        for ( let storyPoint of this.storyPoints ) {\n            if ( storyPoint.matches(state) ) {\n                found.push(storyPoint);\n            }\n        }\n\n        return found;\n    }\n\n    getMatch(state: bigint) {\n        const matches = this.getAllMatching(state)\n                            .sort((a, b) => b.maskBits - a.maskBits);\n        if ( matches.length > 1 ) {\n            //console.log(\"had many matches\");\n            //console.log(matches);\n        }\n        if ( matches.length > 1 /*&& matches[1].maskBits === matches[0].maskBits*/ ) {\n            throw new Error(\"Too many matches\");\n        }\n\n        /* if ( matches.length === 0 ) {\n         *     throw new Error(\"No matches\");\n         * }\n         */\n        return matches.length > 0 ? matches[0] : null;\n    }\n\n    getCombinationMatch(state: bigint): StoryPoint {\n        const storyPoints = this.getAllMatching(state);\n        let storyPoint = storyPoints[0];\n        console.error(\"Combining:\", storyPoints);\n        for ( const other of storyPoints.slice(1) ) {\n            storyPoint = storyPoint.getUnion(other);\n        }\n        return storyPoint;\n    }\n\n};\n","import { type Molecule } from './quarks';\nimport { countSetBits } from './countbits';\nimport { toBinaryString, cyrb53 } from './util';\nimport { STATELEN } from './constants';\nimport { ActionsRecord } from './types';\n\n\nfunction getColor(id: number) {\n    return id.toString(16).substring(0, 6);\n}\n\nlet colorId = 0;\n\nexport class Transition {\n    name: string;\n    given: Molecule;\n    actions: ActionsRecord | undefined;\n    fieldsToSet: Molecule;\n    fieldsToSetWithoutIgnored: Molecule;\n    colorId: number;\n    maskBits: number;\n\n    constructor(name: string, given: Molecule, actions: ActionsRecord, fieldsToSet: Molecule, fieldsToSetWithoutIgnored: Molecule) {\n        this.name = name;\n        this.given = given;\n        this.actions = actions;\n        this.fieldsToSet = fieldsToSet;\n        this.fieldsToSetWithoutIgnored = fieldsToSetWithoutIgnored;\n        this.colorId = colorId++;\n\n        if ( this.given.overlapsWith(fieldsToSet) ) {\n            throw new Error(`Entry transition and fieldsToSet overlap: ${this.given}, ${fieldsToSet}`);\n        }\n\n        this.maskBits = countSetBits(this.given.stateSet);\n    }\n\n    get id() {\n        return this.colorId;\n    }\n\n\n    get color() {\n        return '#' + getColor(cyrb53(`${this.actions?.say ?? \"\"} ${this.colorId}`));\n    }\n\n    get givenMask() {\n        return this.given.mask;\n    }\n\n    matches(state: bigint) {\n        return this.given.test(state);\n    }\n\n    apply(state: bigint) {\n        return this.fieldsToSet.applyToState(state);\n    }\n\n\n};\n\n\n\nexport class TransitionStore {\n    name: string;\n    transitions: Transition[];\n    commonFieldsToSet: Molecule;\n\n    constructor(name: string, transitions: Transition[]) {\n        this.name = name;\n        this.transitions = transitions;\n        let common = transitions[0].fieldsToSetWithoutIgnored;\n        for ( const other of transitions.slice(1) ) {\n            common = common.getIntersection(other.fieldsToSet);\n        }\n        this.commonFieldsToSet = common;\n    }\n\n    get size() {\n        return this.transitions.length;\n    }\n\n    getAllMatching(state: bigint): Transition[] {\n        const found = [];\n\n        for ( let transition of this.transitions ) {\n            if ( transition.matches(state) ) {\n                found.push(transition);\n            }\n        }\n\n        return found;\n    }\n\n    getMatch(state: bigint) {\n        const matches = this.getAllMatching(state)\n                            .sort((a, b) => b.maskBits - a.maskBits);\n        console.error(\"matches:\", matches);\n        if ( matches.length > 1 ) {\n            //console.log(\"had many matches\");\n            //console.log(matches);\n        }\n        if ( matches.length > 1 && matches[1].maskBits === matches[0].maskBits ) {\n            throw new Error(`Too many matches: ${matches}`);\n        }\n\n        /* if ( matches.length === 0 ) {\n         *     throw new Error(\"No matches\");\n         * }\n         */\n        return matches.length > 0 ? matches[0] : null;\n    }\n\n    addTransitions(transitions: Transition[]) {\n        for ( const transition of transitions ) {\n\n        }\n    }\n\n};\n\nexport class TransitionLib {\n    entriesByName = new Map();\n\n    constructor() {\n\n    }\n\n    add(name: string, store: TransitionStore) {\n        this.entriesByName.set(name, store);\n    }\n\n    getGroup(name: string) {\n        return this.entriesByName.get(name);\n    }\n\n    getTransition(name: string, state: bigint) {\n        const store = this.entriesByName.get(name);\n        if ( !store ) {\n            throw new Error(`No such action: ${name}`);\n        }\n        return store.getMatch(state);\n    }\n\n    getAllTransitions(name: string, state: bigint) {\n        const store = this.entriesByName.get(name);\n        if ( !store ) {\n            throw new Error(`No such action: ${name}`);\n        }\n        return store.getAllMatching(state);\n    }\n\n    createOrUpdate(name: string, transitions: Transition[]) {\n        const transitionStore = this.getGroup(name);\n        if ( transitionStore ) {\n            transitions = [...transitionStore.transitions, ...transitions];\n        }\n        const newStore = new TransitionStore(name, transitions);\n        this.entriesByName.set(name, newStore);\n    }\n\n};\n\nexport default TransitionLib;\n","[\n  {\n    \"given\": [],\n    \"actions\": {\n      \"say\": \"You are in a town with three people: Gandor, Bert, and Lortha.\\n\"\n    },\n    \"choices\": [\n      {\n        \"name\": \"talkToGandor\",\n        \"variants\": [\n          {\n            \"given\": [\n              \"-metGandor\"\n            ],\n            \"say\": \"Hello, travelers! It's nice to see new people around here. Not many people\\ndare to visit here anymore. Not after what happened to the hunter.\\n\"\n          },\n          {\n            \"given\": [\n              \"metGandor\"\n            ],\n            \"say\": \"Hello again! It's nice to see new people around here. Not many people dare\\nto visit here anymore. Not after what happened to the hunter.\\n\"\n          }\n        ],\n        \"set\": [\n          \"talkingToGandor\"\n        ]\n      },\n      {\n        \"name\": \"talkToBert\",\n        \"set\": [\n          \"talkingToBert\"\n        ],\n        \"variants\": [\n          {\n            \"given\": [\n              \"-metBert\"\n            ],\n            \"say\": \"Hello, mister. Here is my pocket money.\\n\",\n            \"reward\": 50\n          },\n          {\n            \"given\": [\n              \"metBert\"\n            ],\n            \"say\": \"Hello, again. I don't have any more pocket money.\\n\"\n          }\n        ]\n      },\n      {\n        \"name\": \"talkToLortha\",\n        \"variants\": [\n          {\n            \"given\": [\n              \"-metLortha\",\n              \"-knowsAboutCat\",\n              \"-foundCat\"\n            ],\n            \"say\": \"Oh, good morning. I don't have time to talk. I'm looking for my cat.\\n\"\n          },\n          {\n            \"given\": [\n              \"metLortha\",\n              \"-knowsAboutCat\",\n              \"-foundCat\"\n            ],\n            \"say\": \"I don't have time to talk. I'm looking for my cat.\\n\"\n          },\n          {\n            \"given\": [\n              \"knowsAboutCat\",\n              \"-foundCat\"\n            ],\n            \"say\": \"Can't you see I'm busy!\\n\"\n          },\n          {\n            \"given\": [\n              \"knowsAboutCat\",\n              \"foundCat\",\n              \"-rewardedForFindingMrMittens\"\n            ],\n            \"say\": \"Have you found Mister Mittens?\\n\"\n          },\n          {\n            \"given\": [\n              \"knowsAboutCat\",\n              \"foundCat\",\n              \"rewardedForFindingMrMittens\"\n            ],\n            \"say\": \"Hello. Thank you again for finding Mister Mittens.\\n\"\n          }\n        ],\n        \"set\": [\n          \"talkingToLortha\"\n        ]\n      },\n      {\n        \"name\": \"setFoundCat\",\n        \"given\": [\n          \"knowsAboutCat\",\n          \"-foundCat\"\n        ],\n        \"say\": \"Cat Found!\\nAs you search through the rubble you hear a hearty meow.\\nYou have found mr. Mittens!\\n\",\n        \"set\": [\n          \"foundCat\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToGandor\",\n      \"?metGandor\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"exitTalk\",\n        \"say\": \"You stop talking to Gandor.\\n\",\n        \"set\": [\n          \"-talkingToGandor\",\n          \"metGandor\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToGandor\",\n      \"-knowsAboutTheHunter\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"askAboutTheHunter\",\n        \"say\": \"The hunter was found without a head. In the bushes northeast. I bet the goblins\\ndid it. The governor has set a price of 500¤ for any one who manages to destroy\\nthe goblin nest.\\n\",\n        \"set\": [\n          \"knowsAboutTheHunter\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToGandor\",\n      \"knowsAboutTheHunter\",\n      \"-knowsAboutPrize\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"askAboutPrize\",\n        \"say\": \"You get 500¤ from the mayor if you destroy the goblin nest. It's not going\\nto be an easy job, but it’s big money.\\n\",\n        \"set\": [\n          \"knowsAboutPrize\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToGandor\",\n      \"knowsAboutTheHunter\",\n      \"-knowsAboutGoblins\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"askAboutGoblins\",\n        \"say\": \"Goblins! Nasty creatures. They live somewhere in the mountains up north.\\nThere's a prize for killing them.\\n\",\n        \"set\": [\n          \"knowsAboutGoblins\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToGandor\",\n      \"knowsAboutTheHunter\",\n      \"-knowsBertFoundTheBody\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"askWhoFoundTheBody\",\n        \"say\": \"The boy, Bert, found him when he was collecting wood in the woods.\\n\",\n        \"set\": [\n          \"knowsBertFoundTheBody\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToBert\",\n      \"?metBert\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"exitTalk\",\n        \"say\": \"You stop talking to Bert.\\n\",\n        \"set\": [\n          \"-talkingToBert\",\n          \"metBert\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToBert\",\n      \"knowsAboutCat\",\n      \"-foundCat\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"askAboutLorthasCat\",\n        \"say\": \"I think I saw the cat near the storehouse by the river.\\n\",\n        \"set\": [\n          \"knowsTheCatIsInTheStorehouse\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToBert\",\n      \"knowsBertFoundTheBody\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"askAboutPlace\",\n        \"say\": \"I found the hunter headless, his famous neclace gone. It was northeast by\\nthe river.\\n\",\n        \"set\": [\n          \"knowsAboutPlace\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToLortha\",\n      \"?metLortha\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"exitTalk\",\n        \"say\": \"You stop talking to Lortha.\\n\",\n        \"set\": [\n          \"-talkingToLortha\",\n          \"metLortha\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToLortha\",\n      \"-foundCat\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"askAboutCat\",\n        \"say\": \"It's missing. Stop bugging me unless you find it!\\n\",\n        \"set\": [\n          \"knowsAboutCat\"\n        ]\n      }\n    ]\n  },\n  {\n    \"given\": [\n      \"talkingToLortha\",\n      \"foundCat\"\n    ],\n    \"choices\": [\n      {\n        \"name\": \"informTheCatIsFound\",\n        \"say\": \"Thank you so much! Here's a little reward for your help.\\n\",\n        \"reward\": 100,\n        \"set\": [\n          \"rewardedForFindingMrMittens\"\n        ]\n      }\n    ]\n  }\n]","import { Molecule, Library, quark, type NonInternedQuark } from './quarks';\nimport { StoryPoint, StoryPointStore, Choice } from './storyPoint';\nimport { Transition, TransitionStore, TransitionLib } from './transition';\nimport { destructureTidbitArray } from './util';\nimport { StoryPointRecord, ChoiceRecord, VariantRecord, EnrichedVariantRecord, ActionsRecord } from './types';\n// @ts-ignore\nimport storyData from '../data/story.json' with { type: 'json' };\n\n\nfunction getMolecule(cond: string[]) {\n    const { positive, negative, ignored } = destructureTidbitArray(cond);\n    return library.getMoleculeFor([...positive, ...ignored], negative);\n}\n\nfunction getMoleculeWithoutIgnored(cond: string[]) {\n    const { positive, negative, ignored } = destructureTidbitArray(cond);\n    return library.getMoleculeFor(positive, negative);\n}\n\n\n/**\n * Finds and returns all the tidbits in the story.\n **/\nconst extractTidbits = (data: StoryPointRecord[]) => {\n    const seen = new Set<string>();\n    const quarks: NonInternedQuark[] = [];\n\n    const addTidbits = (condition: string[]) => {\n        const { positive, negative, ignored } = destructureTidbitArray(condition);\n        for ( let q of [...positive, ...negative, ...ignored] ) {\n            if ( !seen.has(q) ) {\n                quarks.push(quark(q));\n                seen.add(q);\n            }\n        }\n    };\n\n    for ( const entry of data as StoryPointRecord[] ) {\n        addTidbits(entry.given);\n\n        for ( const choice of entry.choices ) {\n            if ( choice.set ) {\n                addTidbits(choice.set);\n            }\n            if ( choice.given ) {\n                addTidbits(choice.given);\n            }\n        }\n    }\n\n    return quarks;\n}\n\n\nfunction handleChoices(entryCondition: Molecule, choiceRecords: ChoiceRecord[], ignoredMask: bigint): Map<string, Choice> {\n    const choices = new Map<string, Choice>();\n    for ( const choiceRecord of choiceRecords ) {\n        const choiceName = choiceRecord.name;\n        const choiceCondition = choiceRecord.given ? getMoleculeWithoutIgnored(choiceRecord.given) : null;\n        choices.set(choiceName, new Choice(choiceName, choiceCondition));\n        //console.log(\"created choice:\", choices.get(choiceName));\n        const variants = prepareVariants(choiceRecord);\n\n        const transitions = [];\n        for ( const variant of variants ) {\n            const variantCondition = getMolecule(variant.given);\n            const variantEntryCondition = variantCondition.getUnion(entryCondition);\n            const fieldsToSet = getMolecule(variant.set);\n            let fieldsToSetWithoutIgnored = fieldsToSet.withoutBits(ignoredMask);\n\n            // If the choice is conditional, mark opposites of the condition and values to set as ignored from the entry.\n            // For example. If entry.given is [] and a choice has given [-foundCat] and set [foundCat], -foundCat is not\n            // included in the entry condition as it normally would be.\n            if ( choiceCondition ) {\n                fieldsToSetWithoutIgnored = fieldsToSetWithoutIgnored.getOppositesRemoved(choiceCondition);\n            }\n\n            const actions: ActionsRecord = {\n                say: variant.say,\n                reward: variant.reward,\n            };\n\n            const transition = new Transition(choiceName, variantEntryCondition, actions, fieldsToSet, fieldsToSetWithoutIgnored);\n            //console.log(choiceName, transition);\n            transitions.push(transition);\n        }\n\n        transitionLib.createOrUpdate(choiceName, transitions);\n    }\n\n    return choices;\n}\n\n/**\n * Returns a list of one variants if there are no variants in the record, otherwise returns variants.\n **/\nfunction prepareVariants(choice: ChoiceRecord): EnrichedVariantRecord[] {\n    if ( choice.variants ) {\n        return choice.variants.map(variant => ({\n            ...variant,\n            name: choice.name,\n            set: choice.set\n        }));\n    } else {\n        return [\n            {\n                name: choice.name,\n                given: choice.given ?? [],\n                say: choice.say,\n                reward: choice.reward,\n                set: choice.set\n            }\n        ];\n    }\n}\n\nfunction extractStoryPoints(data: StoryPointRecord[]) {\n    const storyPoints = [];\n\n    for ( const entry of data ) {\n        const { positive, negative, ignored } = destructureTidbitArray(entry.given);\n        const ignoredMask = library.getAtomNumberFor(ignored);\n        let matcher = library.getMoleculeFor(positive, negative);\n        const choices = handleChoices(matcher, entry.choices ?? [], ignoredMask);\n\n        for ( const choiceName of choices.keys() ) {\n            const transitionGroup = transitionLib.getGroup(choiceName);\n            matcher = matcher.getUnion(transitionGroup.commonFieldsToSet.getInverse());\n        }\n\n        const storyPoint = new StoryPoint(\n            entry.given.length === 0 ? \"Ø\" : entry.given.join(\"|\"),\n            matcher,\n            entry.actions,\n            choices\n        );\n        storyPoints.push(storyPoint);\n    }\n\n    return storyPoints;\n}\n\nconst tidbits = extractTidbits(storyData);\n\n\nconsole.log(\"TIDBITS:\", tidbits);\n\nconst library = new Library(tidbits);\nconst transitionLib = new TransitionLib();\n\nconst storyPoints = extractStoryPoints(storyData);\n\nconst storyPointStore = new StoryPointStore(storyPoints);\n\nexport { storyPointStore, library, transitionLib };\n","import { storyPointStore, library, transitionLib } from './story';\nimport { StoryPoint } from './storyPoint';\nimport { toBinaryString, destructureTidbitArray } from './util';\nimport { STATELEN } from './constants';\n\n\nexport class StoryEngine {\n    state = 0n;\n    choiceNames: string[] = [];\n    currentStoryPoint: StoryPoint | null = null;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset() {\n        this.setState(0n);\n    }\n\n    setState(state: bigint) {\n        this.state = state;\n        this.currentStoryPoint = storyPointStore.getCombinationMatch(state);\n        if ( this.currentStoryPoint.data?.say ) {\n            console.log(this.currentStoryPoint.data.say);\n        }\n\n        this.choiceNames = [];\n        for ( let choiceName of this.currentStoryPoint.choiceNames ) {\n            this.choiceNames.push(choiceName);\n        }\n    }\n\n\n    select(selection: string) {\n        if ( !this.currentStoryPoint ) {\n            throw new Error(`StoryPoint not selected`);\n        }\n        if ( !this.choiceNames.includes(selection) ) {\n            throw new Error(`No such choice: ${selection}`);\n        }\n\n        const choice = transitionLib.getTransition(selection, this.state);\n        if ( !choice ) {\n            throw new Error(`Couldn't find transition ${selection} from ${toBinaryString(this.state, STATELEN)} ${this.currentStoryPoint.toString()}`);\n        }\n\n        this.setState(this.currentStoryPoint.applyChoice(this.state, choice));\n\n        return choice;\n    }\n\n    get current() {\n        return this.currentStoryPoint;\n    }\n\n    hasTidbits(tidbits: string[]): boolean {\n        const number = library.getAtomNumberFor(tidbits);\n        return !!(this.state & number);\n    }\n\n    hasGiven(tidbits: string[]): boolean {\n        const { positive, negative, ignored } = destructureTidbitArray(tidbits);\n        const given = library.getMoleculeFor([...positive, ...ignored], negative);\n        return given.test(this.state);\n    }\n};\n","import { StoryEngine } from './storyEngine';\nexport { Transition } from './transition';\nexport { StoryPoint } from './storyPoint';\n\nconst engine = new StoryEngine();\n\nexport default engine;\n"],"mappings":"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","names":["quark","quark","storyPoints","storyPoints","tidbits"]}